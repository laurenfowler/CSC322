     1                                  ; NAME:  Lauren Fowler
     2                                  ; Assignment: Happy Python
     3                                  ; Date: Fall 2018
     4                                  
     5                                  ; Define Structure for character on screen
     6                                  STRUC mStruct
     7 00000000 <res 00000002>          	.esc	RESB 2  ; space for <esc>[
     8 00000002 <res 00000002>          	.row:	RESB 2  ; two digit number (characters)
     9 00000004 <res 00000001>          	.semi	RESB 1  ; space for ;
    10 00000005 <res 00000002>          	.col:	RESB 2  ; two digit number (characters)
    11 00000007 <res 00000001>          	.H	RESB 1  ; space for the H
    12 00000008 <res 00000001>          	.char:	RESB 1  ; space for THE character
    13                                  	.size:
    14                                  ENDSTRUC
    15                                  
    16                                  ;define macro
    17                                  %macro print_to_screen 3
    18                                  	;pusha
    19                                  	mov eax, 4
    20                                  	mov ebx, 1
    21                                  	mov ecx, %1 ;start of screen
    22                                  	add ecx, %2
    23                                  	mov edx, %3
    24                                  	int 80h
    25                                  	;popa
    26                                  %endmacro
    27                                  
    28                                  SECTION .data
    29                                  ; Create an array of structs: formatted like the print interrupt uses.
    30 00000000 402A2A2A2A2A2A2A2A-     theMessage:	db "@********> "
    31 00000009 3E20               
    32 0000000B 0B000000                msgSize:	dd $-theMessage
    33 0000000F 0000                    msgLoc:		dw 0
    34                                  
    35                                  
    36                                  byebye:		ISTRUC mStruct
    37 00000011 1B5B                    		AT mStruct.esc,  db 1bh,'['
    38 00000013 3230                    		AT mStruct.row,  db '20'
    39 00000015 3B                      		AT mStruct.semi, db ';'
    40 00000016 3030                    		AT mStruct.col,  db '00'
    41 00000018 48                      		AT mStruct.H,    db 'H'
    42 00000019 20                      		AT mStruct.char, db ' '
    43                                  		IEND
    44                                  
    45                                  
    46                                  ;screen Pattern
    47 0000001A 2A2A2A2A2A2A2A2A2A-     screen: db      "********************************************************************************",0ah
    48 00000023 2A2A2A2A2A2A2A2A2A-
    49 0000002C 2A2A2A2A2A2A2A2A2A-
    50 00000035 2A2A2A2A2A2A2A2A2A-
    51 0000003E 2A2A2A2A2A2A2A2A2A-
    52 00000047 2A2A2A2A2A2A2A2A2A-
    53 00000050 2A2A2A2A2A2A2A2A2A-
    54 00000059 2A2A2A2A2A2A2A2A2A-
    55 00000062 2A2A2A2A2A2A2A2A0A 
    56 0000006B 2A2020202020202020-             db      "*                          *                           *                       *",0ah
    57 00000074 202020202020202020-
    58 0000007D 202020202020202020-
    59 00000086 2A2020202020202020-
    60 0000008F 202020202020202020-
    61 00000098 202020202020202020-
    62 000000A1 202A20202020202020-
    63 000000AA 202020202020202020-
    64 000000B3 202020202020202A0A 
    65 000000BC 2A2020202020202A2A-             db      "*      *************       *        *************      *       *********       *",0ah
    66 000000C5 2A2A2A2A2A2A2A2A2A-
    67 000000CE 2A2A20202020202020-
    68 000000D7 2A2020202020202020-
    69 000000E0 2A2A2A2A2A2A2A2A2A-
    70 000000E9 2A2A2A2A2020202020-
    71 000000F2 202A20202020202020-
    72 000000FB 2A2A2A2A2A2A2A2A2A-
    73 00000104 202020202020202A0A 
    74 0000010D 2A2020202020202020-             db      "*                          *                           *                       *",0ah
    75 00000116 202020202020202020-
    76 0000011F 202020202020202020-
    77 00000128 2A2020202020202020-
    78 00000131 202020202020202020-
    79 0000013A 202020202020202020-
    80 00000143 202A20202020202020-
    81 0000014C 202020202020202020-
    82 00000155 202020202020202A0A 
    83 0000015E 2A2020202020202020-             db      "*                          *                           *                       *",0ah
    84 00000167 202020202020202020-
    85 00000170 202020202020202020-
    86 00000179 2A2020202020202020-
    87 00000182 202020202020202020-
    88 0000018B 202020202020202020-
    89 00000194 202A20202020202020-
    90 0000019D 202020202020202020-
    91 000001A6 202020202020202A0A 
    92 000001AF 2A2020202020202020-             db      "*                          *                           *                       *",0ah
    93 000001B8 202020202020202020-
    94 000001C1 202020202020202020-
    95 000001CA 2A2020202020202020-
    96 000001D3 202020202020202020-
    97 000001DC 202020202020202020-
    98 000001E5 202A20202020202020-
    99 000001EE 202020202020202020-
   100 000001F7 202020202020202A0A 
   101 00000200 2A2020202020202020-             db      "*                                                                              *",0ah
   102 00000209 202020202020202020-
   103 00000212 202020202020202020-
   104 0000021B 202020202020202020-
   105 00000224 202020202020202020-
   106 0000022D 202020202020202020-
   107 00000236 202020202020202020-
   108 0000023F 202020202020202020-
   109 00000248 202020202020202A0A 
   110 00000251 2A2020202020202020-             db      "*           **************************        ***********************          *",0ah
   111 0000025A 2020202A2A2A2A2A2A-
   112 00000263 2A2A2A2A2A2A2A2A2A-
   113 0000026C 2A2A2A2A2A2A2A2A2A-
   114 00000275 2A2A20202020202020-
   115 0000027E 202A2A2A2A2A2A2A2A-
   116 00000287 2A2A2A2A2A2A2A2A2A-
   117 00000290 2A2A2A2A2A2A202020-
   118 00000299 202020202020202A0A 
   119 000002A2 2A2020202020202020-             db      "*                                *               *                             *",0ah
   120 000002AB 202020202020202020-
   121 000002B4 202020202020202020-
   122 000002BD 2020202020202A2020-
   123 000002C6 202020202020202020-
   124 000002CF 202020202A20202020-
   125 000002D8 202020202020202020-
   126 000002E1 202020202020202020-
   127 000002EA 202020202020202A0A 
   128 000002F3 2A2020202020202020-             db      "*                                *     ***********                             *",0ah
   129 000002FC 202020202020202020-
   130 00000305 202020202020202020-
   131 0000030E 2020202020202A2020-
   132 00000317 2020202A2A2A2A2A2A-
   133 00000320 2A2A2A2A2A20202020-
   134 00000329 202020202020202020-
   135 00000332 202020202020202020-
   136 0000033B 202020202020202A0A 
   137 00000344 2A2020202020202020-             db      "*                          *     *               *     *                       *",0ah
   138 0000034D 202020202020202020-
   139 00000356 202020202020202020-
   140 0000035F 2A20202020202A2020-
   141 00000368 202020202020202020-
   142 00000371 202020202A20202020-
   143 0000037A 202A20202020202020-
   144 00000383 202020202020202020-
   145 0000038C 202020202020202A0A 
   146 00000395 2A2020202020202020-             db      "*                          *     **********      *     *                       *",0ah
   147 0000039E 202020202020202020-
   148 000003A7 202020202020202020-
   149 000003B0 2A20202020202A2A2A-
   150 000003B9 2A2A2A2A2A2A2A2020-
   151 000003C2 202020202A20202020-
   152 000003CB 202A20202020202020-
   153 000003D4 202020202020202020-
   154 000003DD 202020202020202A0A 
   155 000003E6 2A2020202020202020-             db      "*                          *     *               *     *                       *",0ah
   156 000003EF 202020202020202020-
   157 000003F8 202020202020202020-
   158 00000401 2A20202020202A2020-
   159 0000040A 202020202020202020-
   160 00000413 202020202A20202020-
   161 0000041C 202A20202020202020-
   162 00000425 202020202020202020-
   163 0000042E 202020202020202A0A 
   164 00000437 2A2020202020202020-             db      "*                          *     *      **********     *                       *",0ah
   165 00000440 202020202020202020-
   166 00000449 202020202020202020-
   167 00000452 2A20202020202A2020-
   168 0000045B 202020202A2A2A2A2A-
   169 00000464 2A2A2A2A2A20202020-
   170 0000046D 202A20202020202020-
   171 00000476 202020202020202020-
   172 0000047F 202020202020202A0A 
   173 00000488 2A2020202020202020-             db      "*                          *                           *                       *",0ah
   174 00000491 202020202020202020-
   175 0000049A 202020202020202020-
   176 000004A3 2A2020202020202020-
   177 000004AC 202020202020202020-
   178 000004B5 202020202020202020-
   179 000004BE 202A20202020202020-
   180 000004C7 202020202020202020-
   181 000004D0 202020202020202A0A 
   182 000004D9 2A2020202020202020-             db      "*                                                                              *",0ah
   183 000004E2 202020202020202020-
   184 000004EB 202020202020202020-
   185 000004F4 202020202020202020-
   186 000004FD 202020202020202020-
   187 00000506 202020202020202020-
   188 0000050F 202020202020202020-
   189 00000518 202020202020202020-
   190 00000521 202020202020202A0A 
   191 0000052A 2A2020202020202020-             db      "*           ***   ***   ***   ***   ***   ***   ***   ***   ***   ***          *",0ah
   192 00000533 2020202A2A2A202020-
   193 0000053C 2A2A2A2020202A2A2A-
   194 00000545 2020202A2A2A202020-
   195 0000054E 2A2A2A2020202A2A2A-
   196 00000557 2020202A2A2A202020-
   197 00000560 2A2A2A2020202A2A2A-
   198 00000569 2020202A2A2A202020-
   199 00000572 202020202020202A0A 
   200 0000057B 2A2020202020202020-             db      "*                                                                              *",0ah
   201 00000584 202020202020202020-
   202 0000058D 202020202020202020-
   203 00000596 202020202020202020-
   204 0000059F 202020202020202020-
   205 000005A8 202020202020202020-
   206 000005B1 202020202020202020-
   207 000005BA 202020202020202020-
   208 000005C3 202020202020202A0A 
   209 000005CC 2A2020202020202020-             db      "*            *     *     *     *     *     *     *     *     *     *           *",0ah
   210 000005D5 202020202A20202020-
   211 000005DE 202A20202020202A20-
   212 000005E7 202020202A20202020-
   213 000005F0 202A20202020202A20-
   214 000005F9 202020202A20202020-
   215 00000602 202A20202020202A20-
   216 0000060B 202020202A20202020-
   217 00000614 202020202020202A0A 
   218 0000061D 2A2020202020202020-             db      "*               *     *     *     *     *     *     *     *     *              *",0ah
   219 00000626 202020202020202A20-
   220 0000062F 202020202A20202020-
   221 00000638 202A20202020202A20-
   222 00000641 202020202A20202020-
   223 0000064A 202A20202020202A20-
   224 00000653 202020202A20202020-
   225 0000065C 202A20202020202020-
   226 00000665 202020202020202A0A 
   227 0000066E 2A2020202020202020-             db      "*            *     *     *     *     *  W  *     *     *     *     *           *",0ah
   228 00000677 202020202A20202020-
   229 00000680 202A20202020202A20-
   230 00000689 202020202A20202020-
   231 00000692 202A20205720202A20-
   232 0000069B 202020202A20202020-
   233 000006A4 202A20202020202A20-
   234 000006AD 202020202A20202020-
   235 000006B6 202020202020202A0A 
   236 000006BF 2A2020202020202020-             db      "*               *     *     *     *     *     *     *     *     *              *",0ah
   237 000006C8 202020202020202A20-
   238 000006D1 202020202A20202020-
   239 000006DA 202A20202020202A20-
   240 000006E3 202020202A20202020-
   241 000006EC 202A20202020202A20-
   242 000006F5 202020202A20202020-
   243 000006FE 202A20202020202020-
   244 00000707 202020202020202A0A 
   245 00000710 2A2020202020202020-             db      "*            *     *     *     *     *     *     *     *     *     *           *",0ah
   246 00000719 202020202A20202020-
   247 00000722 202A20202020202A20-
   248 0000072B 202020202A20202020-
   249 00000734 202A20202020202A20-
   250 0000073D 202020202A20202020-
   251 00000746 202A20202020202A20-
   252 0000074F 202020202A20202020-
   253 00000758 202020202020202A0A 
   254 00000761 2A2020202020202020-             db      "*               *     *     *     *     *     *     *     *     *              *",0ah
   255 0000076A 202020202020202A20-
   256 00000773 202020202A20202020-
   257 0000077C 202A20202020202A20-
   258 00000785 202020202A20202020-
   259 0000078E 202A20202020202A20-
   260 00000797 202020202A20202020-
   261 000007A0 202A20202020202020-
   262 000007A9 202020202020202A0A 
   263 000007B2 2A2A2A2A2A2A2A2A2A-             db      "********************************************************************************",0ah
   264 000007BB 2A2A2A2A2A2A2A2A2A-
   265 000007C4 2A2A2A2A2A2A2A2A2A-
   266 000007CD 2A2A2A2A2A2A2A2A2A-
   267 000007D6 2A2A2A2A2A2A2A2A2A-
   268 000007DF 2A2A2A2A2A2A2A2A2A-
   269 000007E8 2A2A2A2A2A2A2A2A2A-
   270 000007F1 2A2A2A2A2A2A2A2A2A-
   271 000007FA 2A2A2A2A2A2A2A2A0A 
   272                                  
   273 00000803 E9070000                screenSize:     dd $-screen
   274 00000807 00000000                screen_offset:  dd 0
   275                                  
   276                                  
   277                                  SECTION .bss
   278 00000000 <res 00000063>          message:	RESB mStruct.size*(msgSize-theMessage)
   279                                  
   280                                  SECTION .text
   281                                  global _main
   282                                  _main:
   283                                  
   284                                  	;put board on screen
   285 00000000 B919000000              	mov ecx, 25
   286                                  	out_loop:
   287 00000005 51                      		push ecx
   288 00000006 B951000000              		mov ecx, 81
   289                                  		in_loop:
   290 0000000B 51                      			push ecx
   291                                  			print_to_screen screen, [screen_offset], 1
   292                              <1> 
   293 0000000C B804000000          <1>  mov eax, 4
   294 00000011 BB01000000          <1>  mov ebx, 1
   295 00000016 B9[1A000000]        <1>  mov ecx, %1
   296 0000001B 030D[07080000]      <1>  add ecx, %2
   297 00000021 BA01000000          <1>  mov edx, %3
   298 00000026 CD80                <1>  int 80h
   299                              <1> 
   300 00000028 8305[07080000]01        			add dword [screen_offset], 1
   301 0000002F 59                      			pop ecx
   302 00000030 E2D9                    		loop in_loop
   303 00000032 59                      		pop ecx
   304 00000033 E2D0                    	loop out_loop
   305                                  	;board put on screen
   306                                  
   307                                  ; Move cursor to bottom of page
   308 00000035 B804000000              	mov	eax,4
   309 0000003A BB01000000              	mov	ebx,1
   310 0000003F B9[11000000]            	mov	ecx,byebye
   311 00000044 BA09000000              	mov	edx,9
   312 00000049 CD80                    	int	80h
   313                                  
   314 0000004B 66B85000                	mov word ax, 80	
   315 0000004F 668B1D[0B000000]        	mov bx, [msgSize]
   316 00000056 6629D8                  	sub ax, bx
   317 00000059 66D1E8                  	shr ax, 1
   318 0000005C 66A3[0F000000]          	mov [msgLoc], ax	
   319                                  
   320                                  ;;;;;;;;; LOAD message from theMessage
   321 00000062 66A1[0F000000]          	mov	ax,[msgLoc]  ;;;; Column on screen for first char when right justified
   322 00000068 BB[00000000]            	mov	ebx,message		  ;;;; pointer in message array of structs
   323 0000006D 8B0D[0B000000]          	mov	ecx,[msgSize]		  ;;;; loop count of characters in string
   324 00000073 BA[00000000]            	mov	edx,theMessage		  ;;;; pointer into the original message
   325                                  loadTop:
   326 00000078 C6031B                  	mov	BYTE [ebx],1bh
   327 0000007B C643015B                	mov	BYTE [ebx+1],'['
   328 0000007F 66C743023035            	mov	WORD [ebx+2],"05"  ;;;; ROW might need to swap these
   329 00000085 C643043B                	mov	BYTE [ebx+4],';'
   330 00000089 50                      	push	eax		   ;;;; Save this for next loop
   331 0000008A E82E000000              	call	_toAscii	   ;;;  Pass in int in ax, returns two ascii digits in ax
   332 0000008F 66894305                	mov	WORD [ebx+5],ax
   333 00000093 58                      	pop	eax		   ;;;; Restore the screen col number
   334 00000094 C6430748                	mov	BYTE [ebx+7],'H'
   335 00000098 51                      	push	ecx
   336 00000099 8A0A                    	mov	cl,[edx]	   ;;;; Get next char from string
   337 0000009B 884B08                  	mov	[ebx+8],cl
   338 0000009E 59                      	pop	ecx
   339 0000009F 83C309                  	add	ebx,mStruct.size
   340 000000A2 42                      	inc	edx
   341 000000A3 6640                    	inc	ax
   342 000000A5 E2D1                    	loop loadTop
   343                                  
   344                                  ; Demonstrate function calls which uses an array of structs
   345 000000A7 B945000000              	mov	ecx,80-(msgSize-theMessage)
   346 000000AC E818000000               	call	_displayMessage
   347                                  
   348                                  
   349                                  ; Normal termination code
   350 000000B1 B801000000              mov eax, 1
   351 000000B6 BB00000000              mov ebx, 0
   352 000000BB CD80                    int 80h
   353                                  ;;;;;;;;;;;;;;;;;;;;; END OF MAIN ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   354                                  
   355                                  ;;;;;;;;;;;;  Function to convert int to two digits of ascii
   356                                  ;;;;;;;;;;;;  Pass in int in ax, return two chars in ax
   357                                  _toAscii:
   358 000000BD 53                      	push	ebx
   359                                  
   360 000000BE B30A                            mov     bl,10
   361 000000C0 F6F3                            div     bl      ;; puts ax/10 in al, remainder in ah
   362 000000C2 80C430                          add     ah,'0'
   363 000000C5 0430                            add     al,'0'
   364                                  
   365 000000C7 5B                      	pop	ebx
   366 000000C8 C3                      	ret
   367                                  
   368                                  ;;;;;;;;;;;   Function to print the array of structs of message
   369                                  _displayMessage:
   370 000000C9 60                      	pusha
   371 000000CA BB[00000000]            	mov	ebx,message
   372 000000CF 8B0D[0B000000]          	mov	ecx,[msgSize]
   373                                  
   374 000000D5 51                      _dmTop:	push	ecx
   375 000000D6 53                      	push	ebx
   376 000000D7 B804000000              	mov	eax,4  ; system print
   377 000000DC 89D9                    	mov	ecx,ebx ; points to string to print
   378 000000DE BB01000000              	mov	ebx,1   ; standard out
   379 000000E3 BA09000000              	mov	edx,9   ; num chars to print
   380 000000E8 CD80                    	int	80h
   381                                  
   382 000000EA 5B                      	pop	ebx
   383 000000EB 83C309                  	add	ebx,mStruct.size
   384 000000EE 59                      	pop	ecx
   385 000000EF E2E4                    	loop	_dmTop
   386 000000F1 61                      	popa
   387 000000F2 C3                      	ret
   388                                  
   389                                  
   390                                  ;;;;;;;;;;;;;  Function to sleep short period of time ;;;;;;;;;;;
   391                                  _pause: 
   392 000000F3 60                      	pusha
   393 000000F4 B8A2000000              	mov	eax,162
   394 000000F9 BB[07010000]            	mov	ebx,seconds
   395 000000FE B900000000              	mov	ecx,0
   396 00000103 CD80                    	int	80h
   397 00000105 61                      	popa
   398 00000106 C3                      	ret
   399                                  
   400                                  ;;;;;;;;;;;;	Tricky use of ram.... put some data here for _pause to use
   401 00000107 0000000040787D01        seconds: dd	0,25000000  ;;;  seconds, nanoseconds
   402                                  
   403                                  
